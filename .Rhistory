nonPCA <- train(tr.train, diagnosis, method = "glm")
nonPCA <- train(tr.train, form = diagnosis~., method = "glm")
nonPCA <- train(data = tr.train, form = diagnosis~., method = "glm")
nonPCA$finalModel
nonPCA$results
nonPCA
nonPCA <- train(tr.train, diagnosis, method = "glm")
nonPCA <- train(tr.train, method = "glm")
nonPCA <- train(data= tr.train, method = "glm")
nonPCA <- train(data= tr.train, diagnosis, method = "glm")
nonPCA <- train(data= tr.train, y=diagnosis, method = "glm")
nonPCA <- train(data= tr.train, x=diagnosis, method = "glm")
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
nonPCA
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(tr.train, method = "pca", thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
nonPCA
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess("pca", thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(tr.train, "pca", thresh = 0.8))
expl <- preProcess(tr.train, method = "pca", thresh=0.8)
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(expl))
?trainControl
prec <- trainControl(preProcOptions = list(thresh = 0.8, method = "pca"))
prec <- trainControl(method = "pca", preProcOptions = list(thresh = 0.8))
PCA <- train(data=tr.train, diagnosis~., method="glm", preProcess(prec))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", thresh =0.8)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(thresh =0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(preProcptions=list(thresh =0.8)))
ctrl <- trainControl(preProcOptions = list(thresh = 0.95))
ctrl <- trainControl(preProcOptions = list(thresh = 0.8))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", trControl =crtl)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess(crtl))
expl
PCA <- train(expl, diagnosis~., method = "glm")
train.std <- predict(expl, tr.train)
head(train.std)
?trcontrol
?train
nonPCA
predict(expl, testing)
summary(predict(expl, testing))
predNONPCA <- predict(expl, testing)
predNONPCA
confusionMatrix(predNONPCA)
predNONPCA <- predict(expl, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
nonPCA <- train(data= tr.train, diagnosis~., method = "glm")
predNONPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predNONPCA, testing$diagnosis)
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(nonPCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
PCA <- train(data= tr.train, diagnosis~., method = "glm", preProcess="pca",
trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPCA <- predict(PCA, newdata = testing)
confusionMatrix(predPCA, testing$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training)
hist(training$Superplasticizer)
log(0)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
source('C:/Users/OPERACIONES/Datascience/proyectos/coursera/machine learnining/week2_plotting.R')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
?geom_point
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
a <- c("a","b")
length(a)
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
dev.off()
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
dev.off()
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
runApp('~/Perugia/modelos-criticos')
?seq
shiny::runApp('~/Perugia/modelos-criticos')
shiny::runApp('~/Perugia/modelos-criticos')
setwd("~/Perugia/ventas")
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
pares.raw <- read.csv("paresperugia.csv")%>%
select("ESTILO" = vcestil,"MATERIAL"  = vcmater, "COLOR" = vccolor, "ESTILO.MAT.COL" = estilo.mat.col,
"PROGRAMA" = programa, "FAMILIA" = asignado, "FECHA.MONTADO" = fmontado, "MONTADO"= qfmonta,
"PARES" = totpares)
suppressPackageStartupMessages(require(dplyr))
pares.raw <- read.csv("paresperugia.csv")%>%
select("ESTILO" = vcestil,"MATERIAL"  = vcmater, "COLOR" = vccolor, "ESTILO.MAT.COL" = estilo.mat.col,
"PROGRAMA" = programa, "FAMILIA" = asignado, "FECHA.MONTADO" = fmontado, "MONTADO"= qfmonta,
"PARES" = totpares)
head(pares.raw)
suppressPackageStartupMessages(require(ggplot2))
suppressPackageStartupMessages(require(dplyr))
suppressPackageStartupMessages(require(lubridate))
suppressPackageStartupMessages(require(plotly))
suppressPackageStartupMessages(require(pander))
suppressPackageStartupMessages(require(ISOweek))
pares.raw <- read.csv("paresperugia.csv")%>%
select("ESTILO" = vcestil,"MATERIAL"  = vcmater, "COLOR" = vccolor, "ESTILO.MAT.COL" = estilo.mat.col,
"PROGRAMA" = programa, "FAMILIA" = asignado, "FECHA.MONTADO" = fmontado, "MONTADO"= qfmonta,
"PARES" = totpares)
habilita.raw <- read.csv("habilita.csv")%>%
mutate("ESTILO.MAT.COL" = paste0(estilo,mater,color), "STATUS" = 1)%>%
select(ESTILO.MAT.COL, STATUS,"COLECCION" = colecc, "LINEA"= linea)
deshabilita.raw <- read.csv("deshabil.csv")%>%
mutate("ESTILO.MAT.COL" = paste0(estilo,mater,color), "STATUS" = 0)%>%
select(ESTILO.MAT.COL, STATUS, "COLECCION" = colecc, "LINEA"= linea)
status <- rbind(habilita.raw, deshabilita.raw)
datos.raw <- merge(pares.raw ,status, by = "ESTILO.MAT.COL")
alt.sin.venta <- merge(status, pares.raw, by = "ESTILO.MAT.COL", all = TRUE)%>%
filter(STATUS ==1 & is.na(FECHA.MONTADO))
datos.raw$FECHA.MONTADO <- dmy(datos.raw$FECHA.MONTADO)
datos.raw <- datos.raw%>%
mutate("SEMANA" = ISOweek(FECHA.MONTADO),
"DIA.SEM" = weekdays(FECHA.MONTADO),
"YEAR"= year(FECHA.MONTADO))
#status del estilo
status.estilo <- datos.raw%>%select(ESTILO, STATUS)
temp <- unique(status.estilo[,c("ESTILO", "STATUS")])
status.estilo <- temp%>%
group_by(ESTILO)%>%
summarise("STATUS" = max(STATUS))
#status del linea
status.linea <- datos.raw%>%select(LINEA, STATUS)
temp <- unique(status.linea[,c("LINEA", "STATUS")])
status.linea <- temp%>%
group_by(LINEA)%>%
summarise("STATUS" = max(STATUS))
#linea del estilo
linea <- datos.raw%>%select(ESTILO, LINEA)
fin <- max(datos.raw$FECHA.MONTADO)
ini <- min(datos.raw$FECHA.MONTADO)
meses <- as.double(difftime(fin, ini, units = "days")/365*12)
semanas <- as.double(difftime(fin, ini, units = "weeks"))
estilos.por.sem <- datos.raw%>%group_by(YEAR, SEMANA)%>%mutate("cuantos" = n_distinct(ESTILO))
lineas <- length(unique(habilita.raw$LINEA))
estilos <- length(unique(datos.raw[datos.raw$STATUS == 1,]$ESTILO))
alternativas <- length(unique(habilita.raw$ESTILO.MAT.COL))
head(datos.raw)
datos.raw[datos.raw$LINEA == "ROSE",]
max(datos.raw[datos.raw$LINEA == "ROSE",]$SEMANA)
max(datos.raw[datos.raw$LINEA == "ROSE",]$COLECCION)
colec <- function(lin){
tail(datos.raw%>%order(SEMANA)%>%filter(LINEA= lin))
}
colec(ROSE)
datos.raw%>%sort(SEMANA)%>%filter(LINEA= "ROSE")
str(datos.raw)
datos.raw%>%arrange(SEMANA)%>%filter(LINEA= "ROSE")
datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ROSE")
datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES")
tail(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES"),10)
colec(ALPES)
colec <- function(lin){
tail(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES"),1)
}
colec(ALPES)
colec <- function(lin){
tail(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES")%>%select(COLECCION),1)
}
colec(ROSE)
colec <- function(lin){
tail(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES")%>%select(COLECCION),10)
}
colec(ROSE)
colec <- function(lin){
unique(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== "ALPES")%>%select(COLECCION))
}
colec(ROSE)
colec <- function(lin){
unique(datos.raw%>%arrange(SEMANA)%>%filter(LINEA== lin)%>%select(COLECCION))
}
colec
colec(ROSE)
colec("ROSE")
colec("BLANCA")
colec("NICKI")
colec("RAQUEL")
colec("maria")
colec("MARIA")
colec("REMEDIOS")
colec("LOREN")
colec("ZOMBIE")
colec("LESILL12")
colec("LESILLA12")
colec("LESILLA 12")
colec("PINGUI")
colec("AIDA")
colec("MARTA")
colec("LONDON")
colec("ADRIANA")
colec("LIZ")
colec("MEGAN")
colec("ZOE")
colec("DIANA")
estil <- function(lin){
unique(datos.raw%>%arrange(SEMANA)%>%filter(ESTILO== lin)%>%select(COLECCION))
}
estil(12161)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, colour = LINEA, fill = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7)) +
ggtitle("Pares vendidos por estilo")
)
head(por.estilo)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, colour = LINEA, fill = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7)) +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, colour = LINEA, fill = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, colour = LINEA, shape = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, group = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(LINEA, ESTILO)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, group = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
head(datos.raw)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, group = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
head(datos.raw)
head(por.estilo)
por.estilo[por.estilo$ESTILO=="12647",]
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, group = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
?aes
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS), fg=LINEA) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS), colour = LINEA) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, colour = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, fill = STATUS, fg = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
#pares por estilo
por.estilo <- datos.raw%>%
group_by(ESTILO, LINEA)%>%
summarise("Total.pares" = sum(PARES))%>%
arrange(desc(Total.pares))%>%
merge(status.estilo, by = "ESTILO", all.y = T)
por.estilo$STATUS <- factor(por.estilo$STATUS)
ggplotly(
ggplot(por.estilo, aes(reorder(ESTILO,-Total.pares), Total.pares, col = STATUS, fill = LINEA)) +
geom_bar(stat = "identity") +
xlab("ESTILOS") +
theme(axis.text.x = element_text(size = 7), legend.position = "none") +
ggtitle("Pares vendidos por estilo")
)
estil(11977)
estil(12691)
estil(50012)
estil(80268)
estil(13073)
colec("RITA")
head(datos.raw)
unique(datos.raw$STATUS)
head(status.linea)
unique(status.linea$STATUS)
names(status.linea)
names(status.linea) <- c("LINEA","STATUS.LINEA")
names(status.linea)
head(status.estilo)
estil(18661)
datos.raw[datos.raw$ESTILO=="18661",]
datos.raw[datos.raw$ESTILO=="10298",]
